---
title: Compatibility and Versioning
order: 3
layout: page
---
= Compatibility and Versioning

== Compatibility

Vaadin is designed to be a one-stop solution to create web UIs, but you can also use some of its parts in isolation.

For the best effect, we recommend that you combine Vaadin with a well-documented Java back-end framework such as Spring, JavaEE/CDI, or OSGi.
With these combinations, Vaadin can provide everything you need for fully featured web applications.

[cols="1,2",options=header]
|===
|Category|Products
|JDK|Java 8 or later; OpenJDK, Amazon Corretto, Oracle JDK
|Programming Languages|Java, Groovy, Kotlin, etc.
|Java Frameworks|Spring, JavaEE/CDI, OSGi, etc.
|IDEs|Eclipse IDE, NetBeans IDE, IntelliJ IDEA, etc.
|Servlet Containers|Apache Tomcat, Apache TomEE, Wildfly, Glassfish, JBoss, Jetty, etc.
|Server-Side Build Management|Maven, Ivy, Gradle
|Client-Side Build Management|Node/NPM
|Browsers|Firefox, Chrome, Safari, IE11, Edge
|===

On the client-side, any Vaadin component can be used independently without the full framework.
Dependencies are managed through NPM.
In addition, the Vaadin Router works well on its own, and can be used in lightweight client-side applications.

== Vaadin Versioning

Most Vaadin users only need to worry about the platform version (such as 14.0.10).
The platform versioning follows a standard major-minor-maintenance pattern.
Maintenance versions are released typically every second week.

Since version 10, the platform is following a release train cadence, where majors are released according to a specified, faster schedule.
Some versions are labeled with Long Term Support (LTS).
This allows us to quickly release new features to the public, while providing stable upgrade points for our users.
You can learn more about the release cycle here: https://vaadin.com/roadmap

On a technical level, each platform release consists of specific versions of each part of the platform.
For instance, each component has its own version, as has the communication modules, etc.
The platform is a collected set of the most stable versions of each part, tested to work together without issue.
The Maven BOMs control which version of each JAR file is downloaded.
Developers are free to override the version of any dependency, e.g. use a newer release of a specific component before that version is included in the platform.
